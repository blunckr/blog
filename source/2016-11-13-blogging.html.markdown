---
title: blogging
date: 2016-11-13 02:52 UTC
tags: code
---

Hi. This is the first time I've ever blogged. What I want to accomplish with
this blog to just to document the fun things I'm doing with technology, so why
not start with documenting the process of creating this blog? Meta, I know. I'm
going to attempt to limit the number of times I say 'blog' from here on out,
cause it's already bothering me.

### Middleman

Anyways, I'm primarily a Ruby developer. (At least I claim to be, I likely spend
more time with JS, but let's keep that between you and I.) So
[middleman](https://middlemanapp.com/) is a natural choice for a blogging
platform. If you're not familiar with middleman, it's a static site generator,
with an optional gem that gives it nice blogging features. This means locally
you get rails-like features(layouts, partials, helpers, etc) but when you're
ready to deploy, you run a single command that generates a completely static
version of the site, just html and assets.

### GitHub Pages

There are a few advantages to a static site: smaller attack surface, less
maintainance, and simpler (and cheaper hosting). I'm hosting this site on [GitHub
Pages](https://pages.github.com/) because it's really simple, and it's cheap as
free. You can follow detailed instructions on their site, but all you have to do
is create a repo called `#{username}.github.io` and push your site content to
it.

Since I'm generating the static content, rather than creating it by hand, it
gets a little tricky, since it expects the repo to just contain the static
content. If you use [Jekyll](https://jekyllrb.com/) instead of middleman, they
conveniently make it work for you, but no such luck with other generators. I
beleive there is a gem that will solve this for you, but I decided to make my
own solution. This is a learning exercise after all. What I chose to do is keep
the middleman app in a [separate repo](https://github.com/blunckr/blog), and
made a simple bash script that generates the content and pushes it up.

```bash
middleman build
cd ../blunckr.github.io
rm -rf *
rm -rf .git
cp -r ../blog/build/* ./
git init
git add .
git commit --allow-empty-message -m ''
git remote add origin git@github.com:blunckr/blunckr.github.io.git
git push -u --force origin master
```

You will notice that I'm really abusing git here, don't judge. I'm nuking the
entire repo with each publish, copying the new contents over, and force-pushing
it. I'm doing this because I'm not to worried about version control in that
repo, since its all handled in the `blog` repo, and this repo will have all the
assets, and I don't really care to check multiple versions of those in.

### Yarn

Speaking of assets, Middleman used to include Sprokets, the asset pipeline you
may be familiar with from Rails. They no longer include that by default since
front-end development has moved more towards node-based build tools.
There are a few paths you could choose to take, but I decided to use npm, or
rather [yarn](https://github.com/yarnpkg/yarn) to manage them.

### Minimalisim

At this point, you would also need to include a build tool for your assets. If
you've been following front-end development for the past few years, you know
that [there are a few of these](https://hackernoon.com/how-it-feels-to-learn-javascript-in-2016-d3a717dd577f).
But for the purposes of this blog, I want to avoid having too much javascript,
because frankly I'm tired sites that take ages to load and make your mobile
browser crawl. I get it, JS is useful, and it's
pushed the web in new directions, but quite often [we overdo
it](https://www.wired.com/2016/04/average-webpage-now-size-original-doom/). You
don't need a butt-load of JS to deliver some text to your users. So this blog is
an exercise in minimalism. I'm going to attempt to avoid having too many
dependencies, which means I can also avoid overly complex build tools. Currently
the only dependency is Bootstrap for css, and I'd like to try and keep it that
way.
